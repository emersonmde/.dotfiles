---
- name: Setup system and symlink dotfiles
  hosts: localhost
  vars:
    common_packages:
      - awscli
      - cmake
      - curl
      - grep
      - htop
      - hyperfine
      - jq
      - neovim
      - nmap
      - ripgrep
      - stow
      - tmux
      - tree

  tasks:
  - name: Display ansible_os_family
    debug:
      msg: "The OS family is {{ ansible_os_family }}"

  # Install Packages
  - name: Install common packages (non-MacOS)
    package:
      name: "{{ item }}"
      state: present
    loop: "{{ common_packages }}"
    when: ansible_os_family != 'Darwin'
    become: yes

  - name: Install common packages (MacOS)
    package:
      name: "{{ item }}"
      state: present
    loop: "{{ common_packages }}"
    when: ansible_os_family == 'Darwin'
    become: no

  # Install Hack Nerd Font (used in tmux powerline)
  - name: Tap Fonts Homebrew Cask (MacOS)
    homebrew_tap:
      name: homebrew/cask-fonts
      state: present
    when: ansible_os_family == 'Darwin'

  - name: Install Hack Nerd Font (MacOS)
    homebrew_cask:
      name: font-hack-nerd-font
      state: present
    when: ansible_os_family == 'Darwin'

  - name: Install Hack Nerd Font (Ubuntu)
    package:
      name: fonts-hack-ttf
      state: present
    when:
      - ansible_system == 'Linux'
      - ansible_distribution == 'Ubuntu'
    become: yes

  - name: Install Hack Nerd Font (Fedora)
    package:
      name: fontconfig-enhanced-defaults
      state: present
    when:
      - ansible_system == 'Linux'
      - ansible_distribution == 'Fedora'
    become: yes

  # Stow dotfiles
  - name: Check if .dotfiles directory exists
    stat:
      path: ~/.dotfiles
    register: dotfiles_dir

  - name: Clone .dotfiles repository
    git:
      repo: https://github.com/emersonmde/.dotfiles.git
      dest: ~/.dotfiles
    when: not dotfiles_dir.stat.exists

  - name: Check if dotfiles are stowed correctly
    shell: |
      STOWED_FILES=$(stow --simulate --verbose . 2>&1)
      if echo "$STOWED_FILES" | grep -q 'LINK:'; then
        echo "changes_required"
      else
        echo "correctly_stowed"
      fi
    args:
      chdir: ~/.dotfiles
      executable: /bin/bash
    register: stow_check
    changed_when: false
    ignore_errors: true

  - name: Stow dotfiles
    command: stow --no-folding .
    args:
      chdir: ~/.dotfiles
    when: '"changes_required" in stow_check.stdout'

  - name: Check if .dotfiles-work directory exists
    stat:
      path: ~/.dotfiles-work
    register: dotfiles_work_dir

  - name: Check if work dotfiles are stowed correctly
    shell: |
      STOWED_FILES=$(stow --simulate --verbose . 2>&1)
      if echo "$STOWED_FILES" | grep -q 'LINK:'; then
        echo "changes_required"
      else
        echo "correctly_stowed"
      fi
    args:
      chdir: ~/.dotfiles-work
      executable: /bin/bash
    register: work_stow_check
    changed_when: false
    ignore_errors: true
    when: dotfiles_work_dir.stat.exists

  - name: Stow work dotfiles
    command: stow --no-folding .
    args:
      chdir: ~/.dotfiles-work
    when: 'dotfiles_work_dir.stat.exists and "changes_required" in work_stow_check.stdout'

  # Install Node
  - name: Check if NVM is installed
    stat:
      path: "{{ ansible_env.HOME }}/.nvm"
    register: nvm_dir
    changed_when: false

  - name: Install NVM
    shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
    args:
      executable: /bin/bash
    become: no
    when: not nvm_dir.stat.exists

  - name: Install latest LTS version of Node
    shell: . {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install --lts
    args:
      executable: /bin/bash
    become: no
    environment:
      HOME: "{{ ansible_env.HOME }}"
    when: not nvm_dir.stat.exists

  # Install Rust
  - name: Check if Rust is installed
    shell: 'command -v cargo'
    register: cargo_installed
    failed_when: false
    ignore_errors: yes
    changed_when: false

  - name: Install Rust and Cargo
    shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    args:
      executable: /bin/bash
    become: no
    when: cargo_installed.rc != 0

  - name: Get list of installed Rust components
    command: rustup component list --installed
    register: installed_components
    changed_when: false
    become: no
    environment:
      PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"

  - name: Install additional Rust components
    shell: rustup component add {{ item }}
    args:
      executable: /bin/bash
    become: no
    environment:
      PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"
    loop:
      - clippy
      - rls
      - rust-analysis
      - rust-src
      - rustfmt
    when: item not in installed_components.stdout

  # Install Tmux Plugin Manager
  - name: Check if TPM is installed
    stat:
      path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
    register: tpm_dir
    changed_when: false

  - name: Install TPM
    git:
      repo: 'https://github.com/tmux-plugins/tpm.git'
      dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
    become: no
    when: not tpm_dir.stat.exists
    register: tpm_installed

  - name: Run TPM install script
    shell: "{{ ansible_env.HOME }}/.tmux/plugins/tpm/scripts/install_plugins.sh"
    args:
      executable: /bin/bash
    become: no
    when: tpm_installed.changed

  # Install iterm2
  - name: Check if iTerm2 is installed
    stat:
      path: /Applications/iTerm.app
    when: ansible_os_family == 'Darwin'
    register: iterm2_installed

  - name: Install iTerm2
    homebrew:
      name: iterm2
      state: present
    when: ansible_os_family == 'Darwin' and not iterm2_installed.stat.exists

  # Install Spectacle
  - name: Check if Spectacle is installed
    stat:
      path: /Applications/Spectacle.app
    register: spectacle_installed

  - name: Install Spectacle
    homebrew:
      name: spectacle
      state: present
    when: ansible_os_family == 'Darwin' and not spectacle_installed.stat.exists
